{"version":3,"sources":["components/Loading/index.jsx","components/ArrowSlide/index.jsx","containers/ProductDetail/index.jsx"],"names":["Loading","className","size","ArrowSlide","to","onClick","type","aria-label","ProductDetail","id","useParams","Option","Select","dispatch","useDispatch","useState","nav1","setNav1","nav2","setNav2","sizeChange","setSizeChange","listDetailProduct","useSelector","state","product","detailproduct","loading","prodId","title","imageArr","image","quantity","price","sale","status","desc","description","salePrice","useEffect","getAllProductDetail","style","maxWidth","asNavFor","ref","c","prevArrow","nextArrow","map","item","index","src","alt","slidesToShow","length","swipeToSlide","focusOnSelect","arrows","slidesToScroll","category","marginRight","parseFloat","toFixed","charLimit","readMoreText","readLessText","readMoreClassName","readLessClassName","onChange","val","defaultValue","width","marginLeft","value","AddToCart","stock","sizeChose","disabled"],"mappings":"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","file":"static/js/21.f66b11ac.chunk.js","sourcesContent":["import { Spin } from 'antd'\r\nimport React from 'react'\r\nimport './index.scss'\r\nconst Loading = () => {\r\n    return (\r\n        <>\r\n            <div className=\"loading\">\r\n                <Spin size=\"large\" />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Loading","import { Button } from 'antd'\r\nimport React from 'react'\r\nimport { RightOutlined , LeftOutlined } from '@ant-design/icons';\r\nimport './index.scss'\r\nconst ArrowSlide =  ({className, to, onClick}) => (\r\n    <Button type=\"button\" onClick={onClick} className={`button-slide ${className}`} aria-label={to}>\r\n        { to === \"next\" ? <RightOutlined /> : <LeftOutlined />} \r\n    </Button>\r\n)\r\nexport default ArrowSlide\r\n","import { Button, Select } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport Loading from '../../components/Loading';\r\nimport { AddToCart } from '../../Slice/cartSlice';\r\nimport { getAllProductDetail } from '../../Slice/productSlice';\r\nimport ReactReadMoreReadLess from \"react-read-more-read-less\";\r\nimport ArrowSlide from '../../components/ArrowSlide';\r\nimport Slider from 'react-slick';\r\nimport './index.scss';\r\n\r\n\r\nconst ProductDetail = () => {\r\n    const param = useParams()\r\n    const id = param.id\r\n    const { Option } = Select;\r\n    const dispatch = useDispatch()\r\n    const [nav1, setNav1] = useState();\r\n    const [nav2, setNav2] = useState();\r\n    const [sizeChange , setSizeChange] = useState(null)\r\n    const listDetailProduct = useSelector(state => state.product.detailproduct)\r\n    const loading = useSelector(state => state.product.loading)\r\n    const prodId = listDetailProduct.id\r\n    const title = listDetailProduct.title\r\n    const imageArr = listDetailProduct.image\r\n    const quantity = listDetailProduct.quantity\r\n    const size = listDetailProduct.size\r\n    const price = listDetailProduct.price\r\n    const sale = listDetailProduct.sale\r\n    const status = listDetailProduct.status\r\n    let desc = listDetailProduct && listDetailProduct.description\r\n\r\n    const salePrice = price - sale * price\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllProductDetail(id))\r\n    } , [ dispatch , id ])\r\n\r\n\r\n    const handleChange = (val) => {\r\n        setSizeChange(val)\r\n    }\r\n    const handleAddToCart = () => {\r\n        if(sale){\r\n            dispatch(AddToCart({\r\n                id : prodId,\r\n                title : title,\r\n                price : salePrice,\r\n                image : imageArr,\r\n                stock : quantity,\r\n                size : size,\r\n                sizeChose : sizeChange || size[0],\r\n                status : status\r\n            }))\r\n        }\r\n        else{\r\n            dispatch(AddToCart({\r\n                id : prodId,\r\n                title : title,\r\n                price : price,\r\n                image : imageArr,\r\n                stock : quantity,\r\n                size : size,\r\n                sizeChose : sizeChange || size[0],\r\n                status : status\r\n            }))\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"product-detail\">\r\n                {loading ? <Loading/> : <div className=\"container\">\r\n                    <div className=\"main\" style={{ maxWidth : \"100%\" }}>\r\n                        <div className=\"img\">\r\n                            <Slider \r\n                                asNavFor={nav2} \r\n                                ref={c => setNav1(c)} \r\n                                prevArrow = {<ArrowSlide to=\"prev\" /> }\r\n                                nextArrow = {<ArrowSlide to=\"next\" />}\r\n                            >\r\n                                { imageArr && imageArr.map((item , index) =>(\r\n                                    <div className=\"slide-img\" key={ index }>\r\n                                        <img src={ item } alt={ index }/>\r\n                                    </div>\r\n                                )) }\r\n                            </Slider>\r\n                            <Slider\r\n                                asNavFor={nav1}\r\n                                ref={c => setNav2(c)}\r\n                                slidesToShow={ imageArr && imageArr.length > 4 ? 4 : imageArr && imageArr.length }\r\n                                swipeToSlide={true}\r\n                                focusOnSelect={true}\r\n                                arrows={false}\r\n                                slidesToScroll = { 1 }\r\n                \r\n                            >\r\n                                { imageArr && imageArr.map((item , index) =>(\r\n                                    <div className=\"thumb\" key={ index }>\r\n                                        <img src={ item } alt={ index }/>\r\n                                    </div>\r\n                                )) }\r\n                            </Slider>\r\n                        </div>\r\n                        <div className=\"right-txt\">\r\n                            <h3 className=\"margin name\">{ listDetailProduct.title }</h3>\r\n                            <div className=\"margin\"><strong>Category :</strong> <span className=\"category\">{ listDetailProduct.category }</span></div>\r\n                            { sale ? <div className=\"margin\">\r\n                                <strong>Sale : </strong><span className=\"category sale\">{ sale * 100 }%</span>\r\n                                </div> : null\r\n                            }\r\n                            <div className=\"margin\">\r\n                                <strong>Price : </strong> \r\n                                { sale ? \r\n                                    <span style={{ marginRight : \"10px\" }} className=\"category new-price\">\r\n                                        { parseFloat(salePrice).toFixed(2) } $\r\n                                    </span> : null \r\n                                    }\r\n                                <span className={sale ? \"old-price\" : \"new-price\" }>{ price } $</span>\r\n                            </div> \r\n                            \r\n                            {   quantity === 0 ? <div className=\"margin\"> \r\n                                    <span className=\"category\">Out Stock</span> \r\n                                </div> :\r\n                                <div className=\"margin\"><strong>Quantity : </strong> \r\n                                    <span className=\"category\">{ quantity } </span> \r\n                                </div>\r\n                            }\r\n                            <div className=\"margin\"><strong>Description :</strong> <span className=\"description\">\r\n                                <ReactReadMoreReadLess\r\n                                    charLimit={250}\r\n                                    readMoreText={\"Read more\"}\r\n                                    readLessText={\"Read less\"}\r\n                                    readMoreClassName=\"read-more-less--more\"\r\n                                    readLessClassName=\"read-more-less--less\"\r\n                                >\r\n                                    { desc ? desc : \"\" }\r\n                                </ReactReadMoreReadLess>\r\n                            </span></div>\r\n                            <div className=\"margin\">\r\n                                <Select size=\"large\" \r\n                                    onChange={handleChange} \r\n                                    defaultValue=\"Choose Size\"\r\n                                    style={{ width: 200 , marginLeft : \"5px\" }}\r\n                                >\r\n                                    { size && size.map(( item,index ) => (\r\n                                        <Option value={ item } key={ index }>{ item }</Option>\r\n                                    )) }\r\n                                </Select>\r\n                            </div>\r\n                            <Button type=\"primary\" onClick ={ handleAddToCart } disabled = { quantity === 0 }>\r\n                                Add To Cart\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n            </div> \r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProductDetail;"],"sourceRoot":""}